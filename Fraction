public class Fraction implements INumber<Fraction> {
	
	 private int numerator;
	 private int denominator;

	// Constructor
	public Fraction(int numerator, int denominator) {
		
		this.numerator = numerator;
		this.denominator = denominator;
		
	}
	// Compares the value of two fractions
	public int compare(Fraction F) {

		int thisNewNumerator = this.numerator * F.denominator;
		int FNewNumerator = F.numerator * this.denominator;

		if (thisNewNumerator > FNewNumerator) {
			return 1;
		}
		else if (thisNewNumerator < FNewNumerator) {
			return -1;
		}
		else{
			return 0;
		}
	}

public static Fraction findMax(Fraction[] input) {
    // Start with the first fraction as the maximum
    Fraction maxFraction = input[0];

    // Loop through each fraction in the array
    for (Fraction f : input) {
        // If the current fraction is greater than maxFraction, update maxFraction
        if (f.compare(maxFraction) > 0) {
            maxFraction = f;
        }
    }

    // Return the maximum fraction found
    return maxFraction;
}

public static Fraction findMin(Fraction[] input) {
    // Start with the first fraction as the minimum
    Fraction minFraction = input[0];

    // Loop through each fraction in the array
    for (Fraction f : input) {
        // If the current fraction is less than minFraction, update minFraction
        if (f.compare(minFraction) < 0) {
            minFraction = f;
        }
    }

    // Return the minimum fraction found
    return minFraction;
}

	// Add two fractions
	public Fraction plus(Fraction input) {
		
		this.numerator = this.numerator * input.denominator + input.numerator * this.denominator;
		this.denominator = this.denominator * input.denominator;
		return null;
	}

	// Subtract two fractions
	public Fraction minus(Fraction input) {
		
		this.numerator = this.numerator * input.denominator - input.numerator * this.denominator;
		this.denominator = this.denominator * input.denominator;
		return null;
	}

	// Divide two fractions
	public Fraction divide(Fraction input) {
		
		this.numerator = this.numerator * input.denominator;
		this.denominator = this.denominator * input.numerator;
		return null;
	}

	// Multiply two fractions
	public Fraction multiply(Fraction input) {
		
		this.numerator = this.numerator * input.numerator;
		this.denominator = this.denominator * input.denominator;
		return null;
	}

	// Print this fraction
	public void print() {
		System.out.println(numerator + "/" + denominator);
	}

}
public int getCountGreater(Fraction[] inputArray, Fraction inputFraction) {
    return getCountGreaterRecursive(inputArray, inputFraction, 0, inputArray.length - 1);
}

private int getCountGreaterRecursive(Fraction[] inputArray, Fraction inputFraction, int left, int right) {
    if (left > right) {
        return 0; // 
    }

    int middle = left + (right - left) / 2; // Calculate the middle index

    int countLeft = getCountGreaterRecursive(inputArray, inputFraction, left, middle - 1); // Recursively count in the left half
    int countRight = getCountGreaterRecursive(inputArray, inputFraction, middle + 1, right); // Recursively count in the right half

    // Count fractions greater than the inputFraction in the current middle element
    int countMiddle = inputArray[middle].compare(inputFraction) == 1 ? right - middle + 1 : 0;

    // add up left, right, and middle
    return countLeft + countRight + countMiddle;
}
